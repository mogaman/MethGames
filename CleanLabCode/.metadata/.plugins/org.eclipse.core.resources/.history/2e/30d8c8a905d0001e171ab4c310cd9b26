package com.mygdx.game.Entity;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;

public class Circle extends Entity{
	
	
	private float radius;
	ShapeRenderer shape;
	
	
	public Circle (float x, float y, Color colour, float speed, boolean AI) {
		super(x, y, colour, speed, AI);
		radius = 25;
	}

	public float getRadius() 
	{
		return radius;
	}


	public void setRadius(float radius) 
	{
		this.radius = radius;
	}
	
	public void create() {
		shape = new ShapeRenderer();
	}
	
	@Override
	public void update() {
		System.out.format("In circle of radius %f at %f,%f position\n", radius, getX(), getY());
	}

	public void draw() {
		shape.begin(ShapeRenderer.ShapeType.Filled);
		shape.setColor(getColour());
		shape.circle(getX(), getY(), radius);
		shape.end();		
	}
	
	@Override
	public void movement() {
		if(getAIControlled() == false) {
			moveUserControlled();
		}
		
	}

	@Override
	public void moveAIControlled() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void moveUserControlled() {
		//Direction of bucket
		if (Gdx.input.isKeyPressed(Keys.DOWN)) 
		{
			float new_pos =  getY() - 200 * Gdx.graphics.getDeltaTime();
			setY(new_pos);
		}
		if (Gdx.input.isKeyPressed(Keys.UP)) 
		{
			float new_pos =  getY() + 200 * Gdx.graphics.getDeltaTime();
			setY(new_pos);
		}		
	}

	@Override
	public void dispose() {
		shape.dispose();
	}

	
}
